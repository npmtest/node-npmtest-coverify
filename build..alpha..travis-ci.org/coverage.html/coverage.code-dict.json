{"/home/travis/build/npmtest/node-npmtest-coverify/test.js":"/* istanbul instrument in package npmtest_coverify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coverify/lib.npmtest_coverify.js":"/* istanbul instrument in package npmtest_coverify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_coverify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_coverify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-coverify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-coverify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_coverify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_coverify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_coverify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_coverify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_coverify.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_coverify.__dirname +\n                    '/lib.npmtest_coverify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coverify/node_modules/coverify/index.js":"var falafel = require('falafel');\nvar through = require('through2');\nvar sourceMap = require('source-map');\nvar convertSourceMap = require('convert-source-map');\nvar slash = require('slash');\n\nmodule.exports = function (file, opts) {\n    if (typeof file === 'object') {\n        opts = file;\n        file = undefined;\n    }\n    if (!opts) opts = {};\n    var outputFn = opts.output || 'console.log';\n    \n    var expected = [];\n    \n    var chunks = [];\n    var stream = through(write, end);\n    return stream;\n    \n    function write (buf, enc, next) { chunks.push(buf); next() }\n    \n    function end () {\n        var body = Buffer.concat(chunks)\n            .toString('utf8')\n            .replace(/^#!/, '//#!')\n        ;\n\n        if (file.match(/\\.json$/)) {\n            this.push('module.exports=' + body);\n            this.push(null);\n            return;\n        }\n        \n        var fopts = { locations: true, ecmaVersion: 6 };\n        try { var src = falafel(body, fopts, walk) + '' }\n        catch (err) { return onerror(err, file,body) }\n        var sfile = JSON.stringify(JSON.stringify(file));\n\n        var origBody = body;\n        var bodySourceMap = convertSourceMap.fromSource(body);\n        if (bodySourceMap && bodySourceMap.sourcemap.mappings) {\n            bodySourceMap = new sourceMap.SourceMapConsumer(bodySourceMap.sourcemap);\n            origBody = bodySourceMap.sourceContentFor(slash(file));\n            function originalLoc (loc) {\n                var pos = bodySourceMap.originalPositionFor(loc);\n                if (pos.line && pos.column) {\n                    return { line: pos.line, column: pos.column };\n                }\n            }\n            expected = expected.map(function (loc) {\n                var origStart = originalLoc(loc.start);\n                var origEnd = originalLoc(loc.end);\n                if (origStart && origEnd) {\n                    return { start: originalLoc(loc.start), end: originalLoc(loc.end) };\n                }\n                else return false;\n            });\n        }\n\n        var lines = origBody.split('\\n');\n        var lineOffsets = [];\n        var offset = 0;\n        for (var i = 0; i < lines.length; i++) {\n            lineOffsets[i] = offset;\n            offset += lines[i].length + 1;\n        }\n        expected = expected.map(function(loc) {\n            if (!loc) return false;\n            return [\n                lineOffsets[loc.start.line - 1] + loc.start.column,\n                lineOffsets[loc.end.line - 1] + loc.end.column\n            ];\n        });\n        \n        this.push(\n            outputFn + '(\"COVERAGE \" + ' + sfile + ' + \" \" + '\n                + JSON.stringify(JSON.stringify(expected))\n            + ');'\n            + 'var __coverage = '\n            + JSON.stringify(expected.reduce(function (acc, x, ix) {\n                acc[ix] = x;\n                return acc;\n            }, {})) + ';'\n            + 'var __coverageFunction = function () {'\n                + 'var a=[].slice.call(arguments);'\n                + 'a.splice(-1, 0, \"__coverageWrap\");'\n                + 'var f=Function.apply(this, a);'\n                + 'return function(){'\n                    + 'var b=[].slice.call(arguments);'\n                    + 'b.push(__coverageWrap);'\n                    + 'return f.apply(this, b);'\n                + '}'\n            + '};'\n            + '__coverageFunction.prototype = Function.prototype;'\n            + 'var __coverageWrap = function (index) {'\n                + 'if (__coverage[index]) ' + outputFn\n                    + '(\"COVERED \" + ' + sfile\n                    + ' + \" \" + index);'\n                + 'delete __coverage[index];'\n                + 'return function (x) { return x }'\n            + '};'\n            + '(function (Function) {\\n'\n        );\n        this.push(src);\n        this.push('\\n})(__coverageFunction)');\n        this.push(null);\n    }\n    \n    function walk (node) {\n        var index = expected.length;\n        if (node.type === 'VariableDeclarator' && node.init) {\n            expected.push(node.init.loc);\n            node.init.update(\n                '(__coverageWrap(' + index + ')('\n                + node.init.source() + '))'\n            );\n        }\n        else if (/Expression$/.test(node.type)\n        && node.parent.type !== 'UnaryExpression'\n        && node.parent.type !== 'AssignmentExpression'\n        && node.parent.type !== 'UpdateExpression'\n        && (node.type !== 'MemberExpression'\n            || node.parent.type !== 'CallExpression'\n        )) {\n            expected.push(node.loc);\n            node.update('(__coverageWrap(' + index + ')(' + node.source() + '))');\n        }\n        else if ((node.type === 'ExpressionStatement'\n        || node.type === 'VariableDeclaration')\n        && node.parent.type !== 'ForStatement'\n        && node.parent.type !== 'ForInStatement') {\n            var s = '{ __coverageWrap(' + index + ');' + node.source() + '\\n}';\n            if (node.parent.type === 'IfStatement') {\n                node.update(s);\n            }\n            else node.update(s + ';');\n            expected.push(node.loc);\n        }\n        else if (node.type === 'ReturnStatement') {\n            node.update('return __coverageWrap(' + index + ')(function () {'\n                + node.source() + '}).apply(this, [].slice.call(arguments));');\n            expected.push(node.loc);\n        }\n    }\n    \n    function onerror (err, file, body) {\n        if (err && err.lineNumber !== undefined) {\n            var lines = body.split('\\n');\n            var line = lines[err.lineNumber-1];\n            \n            var msg = err.description + '\\n\\n'\n                + file + ':' + err.lineNumber + '\\n'\n                + line + '\\n'\n                + Array(err.column).join(' ') + '^'\n            ;\n            var e = new Error(msg);\n            e.lineNumber = err.lineNumber;\n            e.column = err.column;\n            e.line = line;\n            stream.emit('error', e);\n        }\n        else stream.emit('error', err);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-coverify/node_modules/coverify/parse.js":"var split = require('split2');\nvar through = require('through2');\nvar combine = require('stream-combiner2');\nvar fs = require('fs');\n\nmodule.exports = function (cb) {\n    var files = {};\n    var counts = {};\n    var original = {};\n    \n    return combine(split(), through(write, end));\n\n    function write (line, enc, next) {\n        var m;\n        if (m = /^COVERAGE\\s+(\"[^\"]+\"|\\S+)\\s+(\\S+)/.exec(line)) {\n            var file = m[1], ranges = m[2];\n            if (/^\"/.test(file) && /\"$/.test(file)) file = JSON.parse(file);\n            files[file] = JSON.parse(ranges);\n            original[file] = JSON.parse(ranges).filter(Boolean);\n        }\n        else if (m = /^COVERED\\s+(\"[^\"]+\"|\\S+)\\s+(\\S+)/.exec(line)) {\n            var file = m[1], index = m[2];\n            if (/^\"/.test(file) && /\"$/.test(file)) file = JSON.parse(file);\n            delete files[file][index];\n        }\n        else this.push(line + '\\n');\n        next();\n    }\n    \n    function end () {\n        var ranges = Object.keys(files).reduce(function (acc, file) {\n            return acc.concat(files[file].filter(Boolean));\n        }, []);\n        \n        var missed = Object.keys(files).reduce(function (acc, file) {\n            var seen = {};\n            acc[file] = files[file].filter(Boolean).filter(function (mr) {\n                var key = mr.join('-');\n                if (seen.hasOwnProperty(key)) {\n                    return false;\n                }\n                seen[key] = true;\n                return !ranges.some(function (rr) {\n                    return (mr[0] > rr[0] && mr[1] < rr[1])\n                        || (mr[0] === rr[0] && mr[1] < rr[1])\n                        || (mr[0] > rr[0] && mr[1] === rr[1])\n                    ;\n                });\n            });\n            return acc;\n        }, {});\n        \n        var counts = Object.keys(files).reduce(function (acc, file) {\n            acc[file] = {\n                expr: original[file].length - missed[file].length,\n                total: original[file].length\n            };\n            return acc;\n        }, {});\n        \n        var sources = {};\n        var pending = 0;\n        Object.keys(missed).forEach(function (file) {\n            pending ++;\n            sources[file] = {};\n            \n            fs.readFile(file, 'utf8', function (err, src) {\n                if (err) return cb(err);\n                \n                var lines = src.split('\\n');\n                function findLine (r) {\n                    var c = 0;\n                    var mlines = [];\n                    for (var i = 0; i < lines.length; i++) {\n                        c += lines[i].length + 1;\n                        if (c < r[0]) continue;\n                        \n                        var row = { line: lines[i] };\n                        row.range = [ 0, lines[i].length - 1 ];\n                        if (mlines.length === 0) {\n                            row.range[0] = r[0] - c + lines[i].length;\n                        }\n                        if (c > r[1]) {\n                            row.range[1] = r[1] - c + lines[i].length;\n                        }\n                        mlines.push(row);\n                        \n                        if (c > r[1]) break;\n                    }\n                    var offset =  c - lines[i].length;\n                    var lr = [ r[0] - offset, r[1] - offset + 1 ];\n                    return {\n                        lines: mlines,\n                        num: i, // DEPRECATE\n                        range: lr\n                    };\n                }\n                \n                sources[file] = [];\n                missed[file].forEach(function (range) {\n                    var match = findLine(range);\n                    sources[file].push({\n                        range: range,\n                        lines: match.lines,\n                        lineNum: match.num, // DEPRECATE\n                        column: match.range, // DEPRECATE\n                        line: lines[match.num], // DEPRECATE\n                        code: src.slice(range[0], range[1])\n                    });\n                });\n                next();\n            });\n        });\n        \n        function next () {\n            if (--pending === 0) {\n                cb(null, sources, counts);\n            }\n        }\n    }\n};\n"}